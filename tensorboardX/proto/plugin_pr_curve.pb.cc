// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorboardX/proto/plugin_pr_curve.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorboardX/proto/plugin_pr_curve.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorboardX {
class PrCurvePluginDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PrCurvePluginData> {
} _PrCurvePluginData_default_instance_;

namespace protobuf_tensorboardX_2fproto_2fplugin_5fpr_5fcurve_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrCurvePluginData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrCurvePluginData, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrCurvePluginData, num_thresholds_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PrCurvePluginData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PrCurvePluginData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorboardX/proto/plugin_pr_curve.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _PrCurvePluginData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PrCurvePluginData_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n(tensorboardX/proto/plugin_pr_curve.pro"
      "to\022\014tensorboardX\"<\n\021PrCurvePluginData\022\017\n"
      "\007version\030\001 \001(\005\022\026\n\016num_thresholds\030\002 \001(\rb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorboardX/proto/plugin_pr_curve.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorboardX_2fproto_2fplugin_5fpr_5fcurve_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrCurvePluginData::kVersionFieldNumber;
const int PrCurvePluginData::kNumThresholdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrCurvePluginData::PrCurvePluginData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorboardX_2fproto_2fplugin_5fpr_5fcurve_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorboardX.PrCurvePluginData)
}
PrCurvePluginData::PrCurvePluginData(const PrCurvePluginData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&num_thresholds_) -
    reinterpret_cast<char*>(&version_) + sizeof(num_thresholds_));
  // @@protoc_insertion_point(copy_constructor:tensorboardX.PrCurvePluginData)
}

void PrCurvePluginData::SharedCtor() {
  ::memset(&version_, 0, reinterpret_cast<char*>(&num_thresholds_) -
    reinterpret_cast<char*>(&version_) + sizeof(num_thresholds_));
  _cached_size_ = 0;
}

PrCurvePluginData::~PrCurvePluginData() {
  // @@protoc_insertion_point(destructor:tensorboardX.PrCurvePluginData)
  SharedDtor();
}

void PrCurvePluginData::SharedDtor() {
}

void PrCurvePluginData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrCurvePluginData::descriptor() {
  protobuf_tensorboardX_2fproto_2fplugin_5fpr_5fcurve_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2fplugin_5fpr_5fcurve_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrCurvePluginData& PrCurvePluginData::default_instance() {
  protobuf_tensorboardX_2fproto_2fplugin_5fpr_5fcurve_2eproto::InitDefaults();
  return *internal_default_instance();
}

PrCurvePluginData* PrCurvePluginData::New(::google::protobuf::Arena* arena) const {
  PrCurvePluginData* n = new PrCurvePluginData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrCurvePluginData::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboardX.PrCurvePluginData)
  ::memset(&version_, 0, reinterpret_cast<char*>(&num_thresholds_) -
    reinterpret_cast<char*>(&version_) + sizeof(num_thresholds_));
}

bool PrCurvePluginData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorboardX.PrCurvePluginData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_thresholds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_thresholds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorboardX.PrCurvePluginData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorboardX.PrCurvePluginData)
  return false;
#undef DO_
}

void PrCurvePluginData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorboardX.PrCurvePluginData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // uint32 num_thresholds = 2;
  if (this->num_thresholds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_thresholds(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorboardX.PrCurvePluginData)
}

::google::protobuf::uint8* PrCurvePluginData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboardX.PrCurvePluginData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // uint32 num_thresholds = 2;
  if (this->num_thresholds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_thresholds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorboardX.PrCurvePluginData)
  return target;
}

size_t PrCurvePluginData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboardX.PrCurvePluginData)
  size_t total_size = 0;

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // uint32 num_thresholds = 2;
  if (this->num_thresholds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_thresholds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrCurvePluginData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboardX.PrCurvePluginData)
  GOOGLE_DCHECK_NE(&from, this);
  const PrCurvePluginData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrCurvePluginData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboardX.PrCurvePluginData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboardX.PrCurvePluginData)
    MergeFrom(*source);
  }
}

void PrCurvePluginData::MergeFrom(const PrCurvePluginData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboardX.PrCurvePluginData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.num_thresholds() != 0) {
    set_num_thresholds(from.num_thresholds());
  }
}

void PrCurvePluginData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboardX.PrCurvePluginData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrCurvePluginData::CopyFrom(const PrCurvePluginData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboardX.PrCurvePluginData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrCurvePluginData::IsInitialized() const {
  return true;
}

void PrCurvePluginData::Swap(PrCurvePluginData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrCurvePluginData::InternalSwap(PrCurvePluginData* other) {
  std::swap(version_, other->version_);
  std::swap(num_thresholds_, other->num_thresholds_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrCurvePluginData::GetMetadata() const {
  protobuf_tensorboardX_2fproto_2fplugin_5fpr_5fcurve_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2fplugin_5fpr_5fcurve_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrCurvePluginData

// int32 version = 1;
void PrCurvePluginData::clear_version() {
  version_ = 0;
}
::google::protobuf::int32 PrCurvePluginData::version() const {
  // @@protoc_insertion_point(field_get:tensorboardX.PrCurvePluginData.version)
  return version_;
}
void PrCurvePluginData::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:tensorboardX.PrCurvePluginData.version)
}

// uint32 num_thresholds = 2;
void PrCurvePluginData::clear_num_thresholds() {
  num_thresholds_ = 0u;
}
::google::protobuf::uint32 PrCurvePluginData::num_thresholds() const {
  // @@protoc_insertion_point(field_get:tensorboardX.PrCurvePluginData.num_thresholds)
  return num_thresholds_;
}
void PrCurvePluginData::set_num_thresholds(::google::protobuf::uint32 value) {
  
  num_thresholds_ = value;
  // @@protoc_insertion_point(field_set:tensorboardX.PrCurvePluginData.num_thresholds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorboardX

// @@protoc_insertion_point(global_scope)
