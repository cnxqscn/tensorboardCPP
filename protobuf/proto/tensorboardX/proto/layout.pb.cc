// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorboardX/proto/layout.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorboardX/proto/layout.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorboardX {
class ChartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Chart> {
  public:
  const ::tensorboardX::MultilineChartContent* multiline_;
  const ::tensorboardX::MarginChartContent* margin_;
} _Chart_default_instance_;
class MultilineChartContentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MultilineChartContent> {
} _MultilineChartContent_default_instance_;
class MarginChartContent_SeriesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MarginChartContent_Series> {
} _MarginChartContent_Series_default_instance_;
class MarginChartContentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MarginChartContent> {
} _MarginChartContent_default_instance_;
class CategoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Category> {
} _Category_default_instance_;
class LayoutDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Layout> {
} _Layout_default_instance_;

namespace protobuf_tensorboardX_2fproto_2flayout_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chart, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chart, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chart, title_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Chart_default_instance_), multiline_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Chart_default_instance_), margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chart, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultilineChartContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultilineChartContent, tag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginChartContent_Series, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginChartContent_Series, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginChartContent_Series, lower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginChartContent_Series, upper_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginChartContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarginChartContent, series_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, chart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, closed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layout, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layout, category_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Chart)},
  { 9, -1, sizeof(MultilineChartContent)},
  { 15, -1, sizeof(MarginChartContent_Series)},
  { 23, -1, sizeof(MarginChartContent)},
  { 29, -1, sizeof(Category)},
  { 37, -1, sizeof(Layout)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Chart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultilineChartContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MarginChartContent_Series_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MarginChartContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Category_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Layout_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorboardX/proto/layout.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _Chart_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MultilineChartContent_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _MarginChartContent_Series_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _MarginChartContent_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Category_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Layout_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Chart_default_instance_.DefaultConstruct();
  _MultilineChartContent_default_instance_.DefaultConstruct();
  _MarginChartContent_Series_default_instance_.DefaultConstruct();
  _MarginChartContent_default_instance_.DefaultConstruct();
  _Category_default_instance_.DefaultConstruct();
  _Layout_default_instance_.DefaultConstruct();
  _Chart_default_instance_.multiline_ = const_cast< ::tensorboardX::MultilineChartContent*>(
      ::tensorboardX::MultilineChartContent::internal_default_instance());
  _Chart_default_instance_.margin_ = const_cast< ::tensorboardX::MarginChartContent*>(
      ::tensorboardX::MarginChartContent::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\037tensorboardX/proto/layout.proto\022\014tenso"
      "rboardX\"\217\001\n\005Chart\022\r\n\005title\030\001 \001(\t\0228\n\tmult"
      "iline\030\002 \001(\0132#.tensorboardX.MultilineChar"
      "tContentH\000\0222\n\006margin\030\003 \001(\0132 .tensorboard"
      "X.MarginChartContentH\000B\t\n\007content\"$\n\025Mul"
      "tilineChartContent\022\013\n\003tag\030\001 \003(\t\"\204\001\n\022Marg"
      "inChartContent\0227\n\006series\030\001 \003(\0132\'.tensorb"
      "oardX.MarginChartContent.Series\0325\n\006Serie"
      "s\022\r\n\005value\030\001 \001(\t\022\r\n\005lower\030\002 \001(\t\022\r\n\005upper"
      "\030\003 \001(\t\"M\n\010Category\022\r\n\005title\030\001 \001(\t\022\"\n\005cha"
      "rt\030\002 \003(\0132\023.tensorboardX.Chart\022\016\n\006closed\030"
      "\003 \001(\010\"C\n\006Layout\022\017\n\007version\030\001 \001(\005\022(\n\010cate"
      "gory\030\002 \003(\0132\026.tensorboardX.Categoryb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 522);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorboardX/proto/layout.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorboardX_2fproto_2flayout_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chart::kTitleFieldNumber;
const int Chart::kMultilineFieldNumber;
const int Chart::kMarginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chart::Chart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorboardX_2fproto_2flayout_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorboardX.Chart)
}
Chart::Chart(const Chart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  clear_has_content();
  switch (from.content_case()) {
    case kMultiline: {
      mutable_multiline()->::tensorboardX::MultilineChartContent::MergeFrom(from.multiline());
      break;
    }
    case kMargin: {
      mutable_margin()->::tensorboardX::MarginChartContent::MergeFrom(from.margin());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorboardX.Chart)
}

void Chart::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
  _cached_size_ = 0;
}

Chart::~Chart() {
  // @@protoc_insertion_point(destructor:tensorboardX.Chart)
  SharedDtor();
}

void Chart::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_content()) {
    clear_content();
  }
}

void Chart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chart::descriptor() {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2flayout_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Chart& Chart::default_instance() {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::InitDefaults();
  return *internal_default_instance();
}

Chart* Chart::New(::google::protobuf::Arena* arena) const {
  Chart* n = new Chart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chart::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:tensorboardX.Chart)
  switch (content_case()) {
    case kMultiline: {
      delete content_.multiline_;
      break;
    }
    case kMargin: {
      delete content_.margin_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Chart::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboardX.Chart)
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_content();
}

bool Chart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorboardX.Chart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorboardX.Chart.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorboardX.MultilineChartContent multiline = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multiline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorboardX.MarginChartContent margin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_margin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorboardX.Chart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorboardX.Chart)
  return false;
#undef DO_
}

void Chart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorboardX.Chart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorboardX.Chart.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // .tensorboardX.MultilineChartContent multiline = 2;
  if (has_multiline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *content_.multiline_, output);
  }

  // .tensorboardX.MarginChartContent margin = 3;
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *content_.margin_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorboardX.Chart)
}

::google::protobuf::uint8* Chart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboardX.Chart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorboardX.Chart.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // .tensorboardX.MultilineChartContent multiline = 2;
  if (has_multiline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *content_.multiline_, deterministic, target);
  }

  // .tensorboardX.MarginChartContent margin = 3;
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *content_.margin_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorboardX.Chart)
  return target;
}

size_t Chart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboardX.Chart)
  size_t total_size = 0;

  // string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  switch (content_case()) {
    // .tensorboardX.MultilineChartContent multiline = 2;
    case kMultiline: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.multiline_);
      break;
    }
    // .tensorboardX.MarginChartContent margin = 3;
    case kMargin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.margin_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboardX.Chart)
  GOOGLE_DCHECK_NE(&from, this);
  const Chart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboardX.Chart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboardX.Chart)
    MergeFrom(*source);
  }
}

void Chart::MergeFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboardX.Chart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  switch (from.content_case()) {
    case kMultiline: {
      mutable_multiline()->::tensorboardX::MultilineChartContent::MergeFrom(from.multiline());
      break;
    }
    case kMargin: {
      mutable_margin()->::tensorboardX::MarginChartContent::MergeFrom(from.margin());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void Chart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboardX.Chart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chart::CopyFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboardX.Chart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart::IsInitialized() const {
  return true;
}

void Chart::Swap(Chart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chart::InternalSwap(Chart* other) {
  title_.Swap(&other->title_);
  std::swap(content_, other->content_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chart::GetMetadata() const {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2flayout_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chart

// string title = 1;
void Chart::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Chart::title() const {
  // @@protoc_insertion_point(field_get:tensorboardX.Chart.title)
  return title_.GetNoArena();
}
void Chart::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorboardX.Chart.title)
}
#if LANG_CXX11
void Chart::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorboardX.Chart.title)
}
#endif
void Chart::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorboardX.Chart.title)
}
void Chart::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorboardX.Chart.title)
}
::std::string* Chart::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:tensorboardX.Chart.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Chart::release_title() {
  // @@protoc_insertion_point(field_release:tensorboardX.Chart.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Chart::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:tensorboardX.Chart.title)
}

// .tensorboardX.MultilineChartContent multiline = 2;
bool Chart::has_multiline() const {
  return content_case() == kMultiline;
}
void Chart::set_has_multiline() {
  _oneof_case_[0] = kMultiline;
}
void Chart::clear_multiline() {
  if (has_multiline()) {
    delete content_.multiline_;
    clear_has_content();
  }
}
 const ::tensorboardX::MultilineChartContent& Chart::multiline() const {
  // @@protoc_insertion_point(field_get:tensorboardX.Chart.multiline)
  return has_multiline()
      ? *content_.multiline_
      : ::tensorboardX::MultilineChartContent::default_instance();
}
::tensorboardX::MultilineChartContent* Chart::mutable_multiline() {
  if (!has_multiline()) {
    clear_content();
    set_has_multiline();
    content_.multiline_ = new ::tensorboardX::MultilineChartContent;
  }
  // @@protoc_insertion_point(field_mutable:tensorboardX.Chart.multiline)
  return content_.multiline_;
}
::tensorboardX::MultilineChartContent* Chart::release_multiline() {
  // @@protoc_insertion_point(field_release:tensorboardX.Chart.multiline)
  if (has_multiline()) {
    clear_has_content();
    ::tensorboardX::MultilineChartContent* temp = content_.multiline_;
    content_.multiline_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Chart::set_allocated_multiline(::tensorboardX::MultilineChartContent* multiline) {
  clear_content();
  if (multiline) {
    set_has_multiline();
    content_.multiline_ = multiline;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorboardX.Chart.multiline)
}

// .tensorboardX.MarginChartContent margin = 3;
bool Chart::has_margin() const {
  return content_case() == kMargin;
}
void Chart::set_has_margin() {
  _oneof_case_[0] = kMargin;
}
void Chart::clear_margin() {
  if (has_margin()) {
    delete content_.margin_;
    clear_has_content();
  }
}
 const ::tensorboardX::MarginChartContent& Chart::margin() const {
  // @@protoc_insertion_point(field_get:tensorboardX.Chart.margin)
  return has_margin()
      ? *content_.margin_
      : ::tensorboardX::MarginChartContent::default_instance();
}
::tensorboardX::MarginChartContent* Chart::mutable_margin() {
  if (!has_margin()) {
    clear_content();
    set_has_margin();
    content_.margin_ = new ::tensorboardX::MarginChartContent;
  }
  // @@protoc_insertion_point(field_mutable:tensorboardX.Chart.margin)
  return content_.margin_;
}
::tensorboardX::MarginChartContent* Chart::release_margin() {
  // @@protoc_insertion_point(field_release:tensorboardX.Chart.margin)
  if (has_margin()) {
    clear_has_content();
    ::tensorboardX::MarginChartContent* temp = content_.margin_;
    content_.margin_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Chart::set_allocated_margin(::tensorboardX::MarginChartContent* margin) {
  clear_content();
  if (margin) {
    set_has_margin();
    content_.margin_ = margin;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorboardX.Chart.margin)
}

bool Chart::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
void Chart::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
Chart::ContentCase Chart::content_case() const {
  return Chart::ContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultilineChartContent::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultilineChartContent::MultilineChartContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorboardX_2fproto_2flayout_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorboardX.MultilineChartContent)
}
MultilineChartContent::MultilineChartContent(const MultilineChartContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tag_(from.tag_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorboardX.MultilineChartContent)
}

void MultilineChartContent::SharedCtor() {
  _cached_size_ = 0;
}

MultilineChartContent::~MultilineChartContent() {
  // @@protoc_insertion_point(destructor:tensorboardX.MultilineChartContent)
  SharedDtor();
}

void MultilineChartContent::SharedDtor() {
}

void MultilineChartContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultilineChartContent::descriptor() {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2flayout_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultilineChartContent& MultilineChartContent::default_instance() {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultilineChartContent* MultilineChartContent::New(::google::protobuf::Arena* arena) const {
  MultilineChartContent* n = new MultilineChartContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultilineChartContent::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboardX.MultilineChartContent)
  tag_.Clear();
}

bool MultilineChartContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorboardX.MultilineChartContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag(this->tag_size() - 1).data(),
            this->tag(this->tag_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorboardX.MultilineChartContent.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorboardX.MultilineChartContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorboardX.MultilineChartContent)
  return false;
#undef DO_
}

void MultilineChartContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorboardX.MultilineChartContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tag = 1;
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag(i).data(), this->tag(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorboardX.MultilineChartContent.tag");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorboardX.MultilineChartContent)
}

::google::protobuf::uint8* MultilineChartContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboardX.MultilineChartContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tag = 1;
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag(i).data(), this->tag(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorboardX.MultilineChartContent.tag");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->tag(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorboardX.MultilineChartContent)
  return target;
}

size_t MultilineChartContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboardX.MultilineChartContent)
  size_t total_size = 0;

  // repeated string tag = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tag_size());
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultilineChartContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboardX.MultilineChartContent)
  GOOGLE_DCHECK_NE(&from, this);
  const MultilineChartContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultilineChartContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboardX.MultilineChartContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboardX.MultilineChartContent)
    MergeFrom(*source);
  }
}

void MultilineChartContent::MergeFrom(const MultilineChartContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboardX.MultilineChartContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tag_.MergeFrom(from.tag_);
}

void MultilineChartContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboardX.MultilineChartContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultilineChartContent::CopyFrom(const MultilineChartContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboardX.MultilineChartContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultilineChartContent::IsInitialized() const {
  return true;
}

void MultilineChartContent::Swap(MultilineChartContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultilineChartContent::InternalSwap(MultilineChartContent* other) {
  tag_.InternalSwap(&other->tag_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultilineChartContent::GetMetadata() const {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2flayout_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultilineChartContent

// repeated string tag = 1;
int MultilineChartContent::tag_size() const {
  return tag_.size();
}
void MultilineChartContent::clear_tag() {
  tag_.Clear();
}
const ::std::string& MultilineChartContent::tag(int index) const {
  // @@protoc_insertion_point(field_get:tensorboardX.MultilineChartContent.tag)
  return tag_.Get(index);
}
::std::string* MultilineChartContent::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:tensorboardX.MultilineChartContent.tag)
  return tag_.Mutable(index);
}
void MultilineChartContent::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorboardX.MultilineChartContent.tag)
  tag_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MultilineChartContent::set_tag(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorboardX.MultilineChartContent.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
#endif
void MultilineChartContent::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorboardX.MultilineChartContent.tag)
}
void MultilineChartContent::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorboardX.MultilineChartContent.tag)
}
::std::string* MultilineChartContent::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:tensorboardX.MultilineChartContent.tag)
  return tag_.Add();
}
void MultilineChartContent::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorboardX.MultilineChartContent.tag)
}
#if LANG_CXX11
void MultilineChartContent::add_tag(::std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorboardX.MultilineChartContent.tag)
}
#endif
void MultilineChartContent::add_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorboardX.MultilineChartContent.tag)
}
void MultilineChartContent::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorboardX.MultilineChartContent.tag)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MultilineChartContent::tag() const {
  // @@protoc_insertion_point(field_list:tensorboardX.MultilineChartContent.tag)
  return tag_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MultilineChartContent::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:tensorboardX.MultilineChartContent.tag)
  return &tag_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarginChartContent_Series::kValueFieldNumber;
const int MarginChartContent_Series::kLowerFieldNumber;
const int MarginChartContent_Series::kUpperFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarginChartContent_Series::MarginChartContent_Series()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorboardX_2fproto_2flayout_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorboardX.MarginChartContent.Series)
}
MarginChartContent_Series::MarginChartContent_Series(const MarginChartContent_Series& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  lower_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lower().size() > 0) {
    lower_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lower_);
  }
  upper_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.upper().size() > 0) {
    upper_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upper_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorboardX.MarginChartContent.Series)
}

void MarginChartContent_Series::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lower_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upper_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MarginChartContent_Series::~MarginChartContent_Series() {
  // @@protoc_insertion_point(destructor:tensorboardX.MarginChartContent.Series)
  SharedDtor();
}

void MarginChartContent_Series::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lower_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upper_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarginChartContent_Series::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarginChartContent_Series::descriptor() {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2flayout_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarginChartContent_Series& MarginChartContent_Series::default_instance() {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarginChartContent_Series* MarginChartContent_Series::New(::google::protobuf::Arena* arena) const {
  MarginChartContent_Series* n = new MarginChartContent_Series;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarginChartContent_Series::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboardX.MarginChartContent.Series)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lower_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upper_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MarginChartContent_Series::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorboardX.MarginChartContent.Series)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorboardX.MarginChartContent.Series.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lower = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lower()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lower().data(), this->lower().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorboardX.MarginChartContent.Series.lower"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string upper = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upper()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upper().data(), this->upper().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorboardX.MarginChartContent.Series.upper"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorboardX.MarginChartContent.Series)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorboardX.MarginChartContent.Series)
  return false;
#undef DO_
}

void MarginChartContent_Series::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorboardX.MarginChartContent.Series)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorboardX.MarginChartContent.Series.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // string lower = 2;
  if (this->lower().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lower().data(), this->lower().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorboardX.MarginChartContent.Series.lower");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lower(), output);
  }

  // string upper = 3;
  if (this->upper().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upper().data(), this->upper().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorboardX.MarginChartContent.Series.upper");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->upper(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorboardX.MarginChartContent.Series)
}

::google::protobuf::uint8* MarginChartContent_Series::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboardX.MarginChartContent.Series)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorboardX.MarginChartContent.Series.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // string lower = 2;
  if (this->lower().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lower().data(), this->lower().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorboardX.MarginChartContent.Series.lower");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lower(), target);
  }

  // string upper = 3;
  if (this->upper().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upper().data(), this->upper().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorboardX.MarginChartContent.Series.upper");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->upper(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorboardX.MarginChartContent.Series)
  return target;
}

size_t MarginChartContent_Series::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboardX.MarginChartContent.Series)
  size_t total_size = 0;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // string lower = 2;
  if (this->lower().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lower());
  }

  // string upper = 3;
  if (this->upper().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->upper());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarginChartContent_Series::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboardX.MarginChartContent.Series)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginChartContent_Series* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarginChartContent_Series>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboardX.MarginChartContent.Series)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboardX.MarginChartContent.Series)
    MergeFrom(*source);
  }
}

void MarginChartContent_Series::MergeFrom(const MarginChartContent_Series& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboardX.MarginChartContent.Series)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.lower().size() > 0) {

    lower_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lower_);
  }
  if (from.upper().size() > 0) {

    upper_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upper_);
  }
}

void MarginChartContent_Series::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboardX.MarginChartContent.Series)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginChartContent_Series::CopyFrom(const MarginChartContent_Series& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboardX.MarginChartContent.Series)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginChartContent_Series::IsInitialized() const {
  return true;
}

void MarginChartContent_Series::Swap(MarginChartContent_Series* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarginChartContent_Series::InternalSwap(MarginChartContent_Series* other) {
  value_.Swap(&other->value_);
  lower_.Swap(&other->lower_);
  upper_.Swap(&other->upper_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarginChartContent_Series::GetMetadata() const {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2flayout_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarginChartContent_Series

// string value = 1;
void MarginChartContent_Series::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MarginChartContent_Series::value() const {
  // @@protoc_insertion_point(field_get:tensorboardX.MarginChartContent.Series.value)
  return value_.GetNoArena();
}
void MarginChartContent_Series::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorboardX.MarginChartContent.Series.value)
}
#if LANG_CXX11
void MarginChartContent_Series::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorboardX.MarginChartContent.Series.value)
}
#endif
void MarginChartContent_Series::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorboardX.MarginChartContent.Series.value)
}
void MarginChartContent_Series::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorboardX.MarginChartContent.Series.value)
}
::std::string* MarginChartContent_Series::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:tensorboardX.MarginChartContent.Series.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarginChartContent_Series::release_value() {
  // @@protoc_insertion_point(field_release:tensorboardX.MarginChartContent.Series.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarginChartContent_Series::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:tensorboardX.MarginChartContent.Series.value)
}

// string lower = 2;
void MarginChartContent_Series::clear_lower() {
  lower_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MarginChartContent_Series::lower() const {
  // @@protoc_insertion_point(field_get:tensorboardX.MarginChartContent.Series.lower)
  return lower_.GetNoArena();
}
void MarginChartContent_Series::set_lower(const ::std::string& value) {
  
  lower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorboardX.MarginChartContent.Series.lower)
}
#if LANG_CXX11
void MarginChartContent_Series::set_lower(::std::string&& value) {
  
  lower_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorboardX.MarginChartContent.Series.lower)
}
#endif
void MarginChartContent_Series::set_lower(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorboardX.MarginChartContent.Series.lower)
}
void MarginChartContent_Series::set_lower(const char* value, size_t size) {
  
  lower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorboardX.MarginChartContent.Series.lower)
}
::std::string* MarginChartContent_Series::mutable_lower() {
  
  // @@protoc_insertion_point(field_mutable:tensorboardX.MarginChartContent.Series.lower)
  return lower_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarginChartContent_Series::release_lower() {
  // @@protoc_insertion_point(field_release:tensorboardX.MarginChartContent.Series.lower)
  
  return lower_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarginChartContent_Series::set_allocated_lower(::std::string* lower) {
  if (lower != NULL) {
    
  } else {
    
  }
  lower_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lower);
  // @@protoc_insertion_point(field_set_allocated:tensorboardX.MarginChartContent.Series.lower)
}

// string upper = 3;
void MarginChartContent_Series::clear_upper() {
  upper_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MarginChartContent_Series::upper() const {
  // @@protoc_insertion_point(field_get:tensorboardX.MarginChartContent.Series.upper)
  return upper_.GetNoArena();
}
void MarginChartContent_Series::set_upper(const ::std::string& value) {
  
  upper_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorboardX.MarginChartContent.Series.upper)
}
#if LANG_CXX11
void MarginChartContent_Series::set_upper(::std::string&& value) {
  
  upper_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorboardX.MarginChartContent.Series.upper)
}
#endif
void MarginChartContent_Series::set_upper(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upper_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorboardX.MarginChartContent.Series.upper)
}
void MarginChartContent_Series::set_upper(const char* value, size_t size) {
  
  upper_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorboardX.MarginChartContent.Series.upper)
}
::std::string* MarginChartContent_Series::mutable_upper() {
  
  // @@protoc_insertion_point(field_mutable:tensorboardX.MarginChartContent.Series.upper)
  return upper_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarginChartContent_Series::release_upper() {
  // @@protoc_insertion_point(field_release:tensorboardX.MarginChartContent.Series.upper)
  
  return upper_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarginChartContent_Series::set_allocated_upper(::std::string* upper) {
  if (upper != NULL) {
    
  } else {
    
  }
  upper_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upper);
  // @@protoc_insertion_point(field_set_allocated:tensorboardX.MarginChartContent.Series.upper)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarginChartContent::kSeriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarginChartContent::MarginChartContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorboardX_2fproto_2flayout_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorboardX.MarginChartContent)
}
MarginChartContent::MarginChartContent(const MarginChartContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      series_(from.series_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorboardX.MarginChartContent)
}

void MarginChartContent::SharedCtor() {
  _cached_size_ = 0;
}

MarginChartContent::~MarginChartContent() {
  // @@protoc_insertion_point(destructor:tensorboardX.MarginChartContent)
  SharedDtor();
}

void MarginChartContent::SharedDtor() {
}

void MarginChartContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarginChartContent::descriptor() {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2flayout_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarginChartContent& MarginChartContent::default_instance() {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::InitDefaults();
  return *internal_default_instance();
}

MarginChartContent* MarginChartContent::New(::google::protobuf::Arena* arena) const {
  MarginChartContent* n = new MarginChartContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarginChartContent::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboardX.MarginChartContent)
  series_.Clear();
}

bool MarginChartContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorboardX.MarginChartContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorboardX.MarginChartContent.Series series = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_series()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorboardX.MarginChartContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorboardX.MarginChartContent)
  return false;
#undef DO_
}

void MarginChartContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorboardX.MarginChartContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorboardX.MarginChartContent.Series series = 1;
  for (unsigned int i = 0, n = this->series_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->series(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorboardX.MarginChartContent)
}

::google::protobuf::uint8* MarginChartContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboardX.MarginChartContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorboardX.MarginChartContent.Series series = 1;
  for (unsigned int i = 0, n = this->series_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->series(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorboardX.MarginChartContent)
  return target;
}

size_t MarginChartContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboardX.MarginChartContent)
  size_t total_size = 0;

  // repeated .tensorboardX.MarginChartContent.Series series = 1;
  {
    unsigned int count = this->series_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->series(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarginChartContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboardX.MarginChartContent)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginChartContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarginChartContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboardX.MarginChartContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboardX.MarginChartContent)
    MergeFrom(*source);
  }
}

void MarginChartContent::MergeFrom(const MarginChartContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboardX.MarginChartContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  series_.MergeFrom(from.series_);
}

void MarginChartContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboardX.MarginChartContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginChartContent::CopyFrom(const MarginChartContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboardX.MarginChartContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginChartContent::IsInitialized() const {
  return true;
}

void MarginChartContent::Swap(MarginChartContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarginChartContent::InternalSwap(MarginChartContent* other) {
  series_.InternalSwap(&other->series_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarginChartContent::GetMetadata() const {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2flayout_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarginChartContent

// repeated .tensorboardX.MarginChartContent.Series series = 1;
int MarginChartContent::series_size() const {
  return series_.size();
}
void MarginChartContent::clear_series() {
  series_.Clear();
}
const ::tensorboardX::MarginChartContent_Series& MarginChartContent::series(int index) const {
  // @@protoc_insertion_point(field_get:tensorboardX.MarginChartContent.series)
  return series_.Get(index);
}
::tensorboardX::MarginChartContent_Series* MarginChartContent::mutable_series(int index) {
  // @@protoc_insertion_point(field_mutable:tensorboardX.MarginChartContent.series)
  return series_.Mutable(index);
}
::tensorboardX::MarginChartContent_Series* MarginChartContent::add_series() {
  // @@protoc_insertion_point(field_add:tensorboardX.MarginChartContent.series)
  return series_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorboardX::MarginChartContent_Series >*
MarginChartContent::mutable_series() {
  // @@protoc_insertion_point(field_mutable_list:tensorboardX.MarginChartContent.series)
  return &series_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorboardX::MarginChartContent_Series >&
MarginChartContent::series() const {
  // @@protoc_insertion_point(field_list:tensorboardX.MarginChartContent.series)
  return series_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Category::kTitleFieldNumber;
const int Category::kChartFieldNumber;
const int Category::kClosedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Category::Category()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorboardX_2fproto_2flayout_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorboardX.Category)
}
Category::Category(const Category& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chart_(from.chart_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  closed_ = from.closed_;
  // @@protoc_insertion_point(copy_constructor:tensorboardX.Category)
}

void Category::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  closed_ = false;
  _cached_size_ = 0;
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:tensorboardX.Category)
  SharedDtor();
}

void Category::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Category::descriptor() {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2flayout_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Category& Category::default_instance() {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::InitDefaults();
  return *internal_default_instance();
}

Category* Category::New(::google::protobuf::Arena* arena) const {
  Category* n = new Category;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboardX.Category)
  chart_.Clear();
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  closed_ = false;
}

bool Category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorboardX.Category)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorboardX.Category.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorboardX.Chart chart = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chart()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool closed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorboardX.Category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorboardX.Category)
  return false;
#undef DO_
}

void Category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorboardX.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorboardX.Category.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // repeated .tensorboardX.Chart chart = 2;
  for (unsigned int i = 0, n = this->chart_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chart(i), output);
  }

  // bool closed = 3;
  if (this->closed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->closed(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorboardX.Category)
}

::google::protobuf::uint8* Category::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboardX.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorboardX.Category.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // repeated .tensorboardX.Chart chart = 2;
  for (unsigned int i = 0, n = this->chart_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->chart(i), deterministic, target);
  }

  // bool closed = 3;
  if (this->closed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->closed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorboardX.Category)
  return target;
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboardX.Category)
  size_t total_size = 0;

  // repeated .tensorboardX.Chart chart = 2;
  {
    unsigned int count = this->chart_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart(i));
    }
  }

  // string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // bool closed = 3;
  if (this->closed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Category::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboardX.Category)
  GOOGLE_DCHECK_NE(&from, this);
  const Category* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Category>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboardX.Category)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboardX.Category)
    MergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboardX.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chart_.MergeFrom(from.chart_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.closed() != 0) {
    set_closed(from.closed());
  }
}

void Category::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboardX.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboardX.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  return true;
}

void Category::Swap(Category* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Category::InternalSwap(Category* other) {
  chart_.InternalSwap(&other->chart_);
  title_.Swap(&other->title_);
  std::swap(closed_, other->closed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Category::GetMetadata() const {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2flayout_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Category

// string title = 1;
void Category::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Category::title() const {
  // @@protoc_insertion_point(field_get:tensorboardX.Category.title)
  return title_.GetNoArena();
}
void Category::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorboardX.Category.title)
}
#if LANG_CXX11
void Category::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorboardX.Category.title)
}
#endif
void Category::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorboardX.Category.title)
}
void Category::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorboardX.Category.title)
}
::std::string* Category::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:tensorboardX.Category.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Category::release_title() {
  // @@protoc_insertion_point(field_release:tensorboardX.Category.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Category::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:tensorboardX.Category.title)
}

// repeated .tensorboardX.Chart chart = 2;
int Category::chart_size() const {
  return chart_.size();
}
void Category::clear_chart() {
  chart_.Clear();
}
const ::tensorboardX::Chart& Category::chart(int index) const {
  // @@protoc_insertion_point(field_get:tensorboardX.Category.chart)
  return chart_.Get(index);
}
::tensorboardX::Chart* Category::mutable_chart(int index) {
  // @@protoc_insertion_point(field_mutable:tensorboardX.Category.chart)
  return chart_.Mutable(index);
}
::tensorboardX::Chart* Category::add_chart() {
  // @@protoc_insertion_point(field_add:tensorboardX.Category.chart)
  return chart_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorboardX::Chart >*
Category::mutable_chart() {
  // @@protoc_insertion_point(field_mutable_list:tensorboardX.Category.chart)
  return &chart_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorboardX::Chart >&
Category::chart() const {
  // @@protoc_insertion_point(field_list:tensorboardX.Category.chart)
  return chart_;
}

// bool closed = 3;
void Category::clear_closed() {
  closed_ = false;
}
bool Category::closed() const {
  // @@protoc_insertion_point(field_get:tensorboardX.Category.closed)
  return closed_;
}
void Category::set_closed(bool value) {
  
  closed_ = value;
  // @@protoc_insertion_point(field_set:tensorboardX.Category.closed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Layout::kVersionFieldNumber;
const int Layout::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Layout::Layout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorboardX_2fproto_2flayout_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorboardX.Layout)
}
Layout::Layout(const Layout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      category_(from.category_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:tensorboardX.Layout)
}

void Layout::SharedCtor() {
  version_ = 0;
  _cached_size_ = 0;
}

Layout::~Layout() {
  // @@protoc_insertion_point(destructor:tensorboardX.Layout)
  SharedDtor();
}

void Layout::SharedDtor() {
}

void Layout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Layout::descriptor() {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2flayout_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Layout& Layout::default_instance() {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::InitDefaults();
  return *internal_default_instance();
}

Layout* Layout::New(::google::protobuf::Arena* arena) const {
  Layout* n = new Layout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Layout::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboardX.Layout)
  category_.Clear();
  version_ = 0;
}

bool Layout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorboardX.Layout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorboardX.Category category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorboardX.Layout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorboardX.Layout)
  return false;
#undef DO_
}

void Layout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorboardX.Layout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated .tensorboardX.Category category = 2;
  for (unsigned int i = 0, n = this->category_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->category(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorboardX.Layout)
}

::google::protobuf::uint8* Layout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboardX.Layout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // repeated .tensorboardX.Category category = 2;
  for (unsigned int i = 0, n = this->category_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->category(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorboardX.Layout)
  return target;
}

size_t Layout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboardX.Layout)
  size_t total_size = 0;

  // repeated .tensorboardX.Category category = 2;
  {
    unsigned int count = this->category_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->category(i));
    }
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Layout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboardX.Layout)
  GOOGLE_DCHECK_NE(&from, this);
  const Layout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Layout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboardX.Layout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboardX.Layout)
    MergeFrom(*source);
  }
}

void Layout::MergeFrom(const Layout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboardX.Layout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void Layout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboardX.Layout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layout::CopyFrom(const Layout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboardX.Layout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layout::IsInitialized() const {
  return true;
}

void Layout::Swap(Layout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Layout::InternalSwap(Layout* other) {
  category_.InternalSwap(&other->category_);
  std::swap(version_, other->version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Layout::GetMetadata() const {
  protobuf_tensorboardX_2fproto_2flayout_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorboardX_2fproto_2flayout_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Layout

// int32 version = 1;
void Layout::clear_version() {
  version_ = 0;
}
::google::protobuf::int32 Layout::version() const {
  // @@protoc_insertion_point(field_get:tensorboardX.Layout.version)
  return version_;
}
void Layout::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:tensorboardX.Layout.version)
}

// repeated .tensorboardX.Category category = 2;
int Layout::category_size() const {
  return category_.size();
}
void Layout::clear_category() {
  category_.Clear();
}
const ::tensorboardX::Category& Layout::category(int index) const {
  // @@protoc_insertion_point(field_get:tensorboardX.Layout.category)
  return category_.Get(index);
}
::tensorboardX::Category* Layout::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:tensorboardX.Layout.category)
  return category_.Mutable(index);
}
::tensorboardX::Category* Layout::add_category() {
  // @@protoc_insertion_point(field_add:tensorboardX.Layout.category)
  return category_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorboardX::Category >*
Layout::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:tensorboardX.Layout.category)
  return &category_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorboardX::Category >&
Layout::category() const {
  // @@protoc_insertion_point(field_list:tensorboardX.Layout.category)
  return category_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorboardX

// @@protoc_insertion_point(global_scope)
